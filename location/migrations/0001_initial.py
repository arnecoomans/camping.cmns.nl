# Generated by Django 4.2.6 on 2023-10-20 17:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Identifier in URL (automatically generated)', max_length=255, unique=True)),
                ('name', models.CharField(help_text='Name of category', max_length=255)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='location.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Chain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Identifier in URL (automatically generated)', max_length=255, unique=True)),
                ('name', models.CharField(help_text='Name of location as it is identified by', max_length=255)),
                ('website', models.CharField(blank=True, help_text='Full website address of location', max_length=512)),
                ('description', models.TextField(blank=True, help_text='Markdown is supported')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='children', to='location.chain')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(help_text='full url of link', max_length=512, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Identifier in URL (automatically generated)', max_length=255, unique=True)),
                ('name', models.CharField(help_text='Name of location as it is identified by', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Markdown is supported')),
                ('visibility', models.CharField(choices=[('p', 'public'), ('c', 'commmunity'), ('f', 'family'), ('q', 'private')], default='p', max_length=1)),
                ('status', models.CharField(choices=[('p', 'published'), ('r', 'revoked'), ('x', 'deleted')], default='p', max_length=1)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='lists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'list',
                'verbose_name_plural': 'lists',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Identifier in URL (automatically generated)', max_length=255, unique=True)),
                ('name', models.CharField(help_text='Name of location as it is identified by', max_length=255)),
                ('website', models.CharField(blank=True, help_text='Full website address of location', max_length=512, unique=True)),
                ('address', models.CharField(blank=True, help_text='Full street address of location, including as much information as possible, such as city, region, country', max_length=512)),
                ('phone', models.CharField(blank=True, max_length=32, null=True)),
                ('owners_names', models.CharField(blank=True, help_text='Name of owner(s), if known', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Markdown is supported')),
                ('meta_description', models.CharField(blank=True, help_text='Meta description taken from website, if available', max_length=255)),
                ('distance_to_departure_center', models.BigIntegerField(blank=True, help_text='distance to central location in departure region in kilometers', null=True)),
                ('coord_lat', models.CharField(blank=True, editable=False, help_text='Coordinates: Lat (fetched from location service based on name and/or address)', max_length=64)),
                ('coord_lng', models.CharField(blank=True, editable=False, help_text='Coordinates: Lng (fetched from location service based on name and/or address)', max_length=64)),
                ('visibility', models.CharField(choices=[('p', 'public'), ('c', 'commmunity'), ('f', 'family'), ('q', 'private')], default='p', max_length=1)),
                ('status', models.CharField(choices=[('p', 'published'), ('r', 'revoked'), ('x', 'deleted')], default='p', max_length=1)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('automated_changelog', models.TextField(blank=True, editable=False)),
                ('cached_google', models.JSONField(editable=False, null=True)),
                ('additional_category', models.ManyToManyField(blank=True, related_name='secondary_for', to='location.category')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='location.category')),
                ('chain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='locations', to='location.chain')),
                ('link', models.ManyToManyField(blank=True, help_text='Add links to related websites, such as blogs refering to this location or review websites', to='location.link')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Identifier in URL (automatically generated)', max_length=64, unique=True)),
                ('name', models.CharField(help_text='Name of tag', max_length=128)),
                ('list_as', models.CharField(choices=[('n', 'neither'), ('a', 'advantage'), ('d', 'disadvantage'), ('b', 'both')], default='b', max_length=1)),
                ('status', models.CharField(choices=[('p', 'published'), ('r', 'revoked'), ('x', 'deleted')], default='p', max_length=1)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='location.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(help_text='Identifier in URL (automatically generated)', max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='location.region')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.ManyToManyField(blank=True, help_text='family members', related_name='famlily_of', to=settings.AUTH_USER_MODEL)),
                ('favorite', models.ManyToManyField(blank=True, related_name='favorite_of', to='location.location')),
                ('home', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='home_of', to='location.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='location.region'),
        ),
        migrations.AddField(
            model_name='location',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='locations', to='location.tag'),
        ),
        migrations.AddField(
            model_name='location',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='locations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ListLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0)),
                ('comment', models.TextField(blank=True, help_text='Markdown is supported')),
                ('nights', models.IntegerField(default=0)),
                ('price', models.IntegerField(default=0)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='location.list')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='list', to='location.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='listlocations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'list-location',
                'verbose_name_plural': 'list-locations',
                'ordering': ['list', 'order'],
                'get_latest_by': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ListDistance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.BigIntegerField(default=0, help_text='in meters')),
                ('time', models.BigIntegerField(default=0, help_text='in seconds')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dest_destination', to='location.location')),
                ('origin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dest_origin', to='location.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='listdistances', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, help_text='Markdown is supported')),
                ('visibility', models.CharField(choices=[('p', 'public'), ('c', 'commmunity'), ('f', 'family'), ('q', 'private')], default='c', max_length=1)),
                ('status', models.CharField(choices=[('p', 'published'), ('r', 'revoked'), ('x', 'deleted')], default='p', max_length=1)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='location.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
